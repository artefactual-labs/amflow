// Code generated by goagen v1.4.3, DO NOT EDIT.
//
// API "amflow": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/artefactual-labs/amflow/design
// --out=/home/jesus/Projects/amflow/internal/api
// --version=v1.4.3

package app

import (
	"context"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/cors"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// WebController is the controller interface for the Web actions.
type WebController interface {
	goa.Muxer
	goa.FileServer
}

// MountWebController "mounts" a Web resource controller on the given service.
func MountWebController(service *goa.Service, ctrl WebController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/*filepath", ctrl.MuxHandler("preflight", handleWebOrigin(cors.HandlePreflight()), nil))

	h = ctrl.FileHandler("/*filepath", "web/")
	h = handleWebOrigin(h)
	service.Mux.Handle("GET", "/*filepath", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Web", "files", "web/", "route", "GET /*filepath")

	h = ctrl.FileHandler("/", "web/index.html")
	h = handleWebOrigin(h)
	service.Mux.Handle("GET", "/", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Web", "files", "web/index.html", "route", "GET /")
}

// handleWebOrigin applies the CORS response headers corresponding to the origin.
func handleWebOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://swagger.goa.design") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// WorkflowController is the controller interface for the Workflow actions.
type WorkflowController interface {
	goa.Muxer
	AddLink(*AddLinkWorkflowContext) error
	DeleteLink(*DeleteLinkWorkflowContext) error
	MoveLink(*MoveLinkWorkflowContext) error
	Show(*ShowWorkflowContext) error
}

// MountWorkflowController "mounts" a Workflow resource controller on the given service.
func MountWorkflowController(service *goa.Service, ctrl WorkflowController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/workflow/:workflowID/links", ctrl.MuxHandler("preflight", handleWorkflowOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/workflow/:workflowID/links/:linkID", ctrl.MuxHandler("preflight", handleWorkflowOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/workflow/:workflowID", ctrl.MuxHandler("preflight", handleWorkflowOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddLinkWorkflowContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.AddLink(rctx)
	}
	h = handleWorkflowOrigin(h)
	service.Mux.Handle("PATCH", "/workflow/:workflowID/links", ctrl.MuxHandler("addLink", h, nil))
	service.LogInfo("mount", "ctrl", "Workflow", "action", "AddLink", "route", "PATCH /workflow/:workflowID/links")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteLinkWorkflowContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.DeleteLink(rctx)
	}
	h = handleWorkflowOrigin(h)
	service.Mux.Handle("DELETE", "/workflow/:workflowID/links/:linkID", ctrl.MuxHandler("deleteLink", h, nil))
	service.LogInfo("mount", "ctrl", "Workflow", "action", "DeleteLink", "route", "DELETE /workflow/:workflowID/links/:linkID")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewMoveLinkWorkflowContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.MoveLink(rctx)
	}
	h = handleWorkflowOrigin(h)
	service.Mux.Handle("PATCH", "/workflow/:workflowID/links/:linkID", ctrl.MuxHandler("moveLink", h, nil))
	service.LogInfo("mount", "ctrl", "Workflow", "action", "MoveLink", "route", "PATCH /workflow/:workflowID/links/:linkID")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowWorkflowContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleWorkflowOrigin(h)
	service.Mux.Handle("GET", "/workflow/:workflowID", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Workflow", "action", "Show", "route", "GET /workflow/:workflowID")
}

// handleWorkflowOrigin applies the CORS response headers corresponding to the origin.
func handleWorkflowOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://swagger.goa.design") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}
